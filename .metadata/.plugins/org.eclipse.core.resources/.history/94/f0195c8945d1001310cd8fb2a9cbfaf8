package headfirst.combined.djview;

import java.util.ArrayList;

import javax.sound.midi.MetaEventListener;
import javax.sound.midi.Sequence;
import javax.sound.midi.Sequencer;
import javax.sound.midi.Track;

public class BeatModel implements BeatModelInterface, MetaEventListener{
	Sequence sequence;
	Sequencer sequencer;
	Track track;
	ArrayList<BeatObserver> beatObservers = new ArrayList<BeatObserver>();
	ArrrayList<BPMObserver> BPMObservers = new ArrayList<BPMObserver>();
	int bpm = 90;
	
	public void initialize() {
		setUpMidi();
		buildTrackAndStart();
	}
	
	public void on() {
		sequencer.start();
		setBPM(90);
	}
	
	public void off() {
		setBPM(0);
		sequencer.stop();
	}
	
	public void setBPM(int bpm) {
		this.bpm = bpm;
		sequencer.setTempoInBPM(getBPM());
		notifyBPMObservers();
	}
	
	public int getBPM() {
		return bpm;
	}
	
	void beatEvent() {
		notifyBeatObservers();
	}
	
	public void registerObserver(BeatObserver o) {
		beatObservers.add(o);
	}
	
	public void notifyBeatObservers() {
		for(int i = 0; i < beatObservers.size(); i++) {
			BeatObserver observer = beatObservers.get(i);
			observer.updateBeat();
		}
	}
	
	public void registerObserver(BPMObserver o) {
		bmpObservers.add(o);
	}
	
	public void notifyBPMObservers() {
		for(int i = 0; i < bmpObservers.size(); i++) {
			BPMObserver observer = bpmObservers.get(i);
			observer.updateBPM();
		}
	}
	
	public void removeObserver(BeatObserver o) {
		int i = beatObservers.indexOf(o);
		if(i >= 0) {
			beatObservers.remove(i);
		}
	}
	
	public void removeObserver(BPMObserver o) {
		int i = bpmObservers.indexOf(o);
		if(i >= 0) {
			bpmObservers.remove(i);
		}
	}
	
	
	}
}
